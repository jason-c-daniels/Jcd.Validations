<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.Validations</name>
    </assembly>
    <members>
        <member name="T:Jcd.Validations.Argument">
            <summary>
               An argument "guard code" helper class.
            </summary>
            <remarks>
               Use these methods to help ensure arguments meet various pre-conditions, and to generate
               consistent and standard exceptions on failure. The names of these methods are to be
               interpreted literally. For example this code will fail:
               <code>
            Argument.IsWhitespace(string.Empty);
            </code>
               This is because an empty string has no characters, which means none of the characters are whitespace.
               Furthermore, if you wish to customize the kinds of validations available, create your own public static partial
               class Argument class, and add your own validation methods.
               It's highly recommended, that for consistency you use the existing Passes.. or Fails... methods. Or alternately you
               can use the underlying "Check." class.
               Craft your calls based on uses within this implementation.
            </remarks>
        </member>
        <member name="F:Jcd.Validations.Argument.UnspecifiedParamName">
            <summary>
               The default name for any parameter whose name was not provided at the point of invocation.
            </summary>
        </member>
        <member name="M:Jcd.Validations.Argument.RaiseArgumentException(System.String,System.String)">
            <summary>
               An helper method to raise an ArgumentException, setting defaults if not provided.
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Jcd.Validations.Argument.RaiseArgumentNullException(System.String,System.String)">
            <summary>
               A helper method to raise an ArgumentNullException
            </summary>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Jcd.Validations.Argument.RaiseArgumentOutOfRangeException``1(``0,``0,``0,System.String,System.String)">
            <summary>
               A helper method to raise an ArgumentOutOfRange exception.
            </summary>
            <param name="value">the offending value</param>
            <param name="min">the minimum, inclusive, value for the range</param>
            <param name="max">the maximum, inclusive, value for the range</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <typeparam name="T">
               The data type for <paramref name="value" />, <paramref name="min" /> and <paramref name="max" />
            </typeparam>
        </member>
        <member name="M:Jcd.Validations.Argument.RaiseExpectationViolation``1(``0,``0,System.String,System.String)">
            <summary>
               A helper method to raise an ArgumentException with a message that shows the values.
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <typeparam name="T">The data type for <paramref name="expected" /> and <paramref name="actual" /></typeparam>
        </member>
        <member name="M:Jcd.Validations.Argument.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
               Ensures the argument value is false.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="value" /> is true</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotNull``1(``0,System.String,System.String)">
            <summary>
               Ensure the argument is not null.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value" /> is null</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNull``1(``0,System.String,System.String)">
            <summary>
               Ensure the argument is null
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="value" /> is not null</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
               Ensure the argument is true.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="value" /> is false.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.String)">
            <summary>
               Ensure a value exists within an enumerable.
            </summary>
            <typeparam name="T">The type of the target value.</typeparam>
            <param name="list">The enumerable</param>
            <param name="target">The value being sought.</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="list" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="target" /> can't be found.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.String)">
            <summary>
               Ensure a value doesn't exist within an enumerable.
            </summary>
            <typeparam name="T">The type of the target value.</typeparam>
            <param name="list">The enumerable</param>
            <param name="target">The value being sought.</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="list" /> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="target" /> was found.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.HasItems``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
               Ensure an enumerable has at least one item.
            </summary>
            <typeparam name="T">The type of the enumerated values.</typeparam>
            <param name="list">The enumerable</param>
            <param name="name">the argument name.</param>
            <param name="message">the error message.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="list" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
               When <paramref name="list" /> no items were found.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
               Ensure an enumerable has zero items.
            </summary>
            <typeparam name="T">The type of the enumerated values.</typeparam>
            <param name="list">The enumerable to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="list" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
               When <paramref name="list" /> at least one item was found.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is not empty
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">If the value is <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is <see cref="F:System.String.Empty" />
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">If the value is null.</exception>
            <exception cref="T:System.ArgumentException">If the value is not <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is not null or empty.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">If the value is <see cref="F:System.String.Empty" />.</exception>
            <exception cref="T:System.ArgumentNullException">If the value is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is not null or whitespace.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">If the value is null
               or <see cref="F:System.String.Empty">String.Empty</see>
               .</exception>
            <exception cref="T:System.ArgumentNullException">If the value is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotNullWhitespaceOrEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is not null, empty, or whitespace.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is null
               , only whitespace, or <see cref="F:System.String.Empty">String.Empty</see>
               .
            </exception>
            <exception cref="T:System.ArgumentNullException">If the value is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotWhitespace(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is not whitespace. This is a pedantic check. String.Empty passes it,
               as well as null.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is only whitespace and a string length of at least 1.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNotWhitespaceOrEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is not whitespace. It may be null, or non-whitespace
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">If the value is only whitespace or <see cref="F:System.String.Empty" />.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNullOrEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is null or <see cref="F:System.String.Empty" />
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is <see cref="F:System.String.Empty" /> or null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is null or <see cref="F:System.String.Empty" />. This is a pedantic check as
               String.Empty will fail it.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is not null, or whitespace of at least one character.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsNullWhitespaceOrEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is null, whitespace or <see cref="F:System.String.Empty" />.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is not null, <see cref="F:System.String.Empty" /> ,or whitespace of at least one character.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsWhitespace(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is contains 1 or more whitespace characters.
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is not whitespace of at least one character.
            </exception>
            <exception cref="T:System.ArgumentNullException">If the value is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsWhitespaceOrEmpty(System.String,System.String,System.String)">
            <summary>
               Ensures that a string is contains 1 or is <see cref="F:System.String.Empty" />
            </summary>
            <param name="value">The value to test.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               If the value is null, or non-whitespace of 1 or more characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">When value is null</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.Contains(System.String,System.String,System.String,System.String)">
            <summary>
               Ensure that the search string (param) contains the target value somewhere within.
            </summary>
            <param name="searchString">The string to search within</param>
            <param name="target">the substring to search for</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Jcd.Validations.Argument.AreEqual``1(``0,``0,System.String,System.String)">
            <summary>
               Ensure two IComparable instances are equivalent, or both are null.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="comparison">The expected value.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the values are not equivalent.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.AreSameObject(System.Object,System.Object,System.String,System.String)">
            <summary>
               Ensure two objects refer to the same instance, or both are null.
            </summary>
            <param name="value">The value being tested.</param>
            <param name="comparison">The expected value.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">
               When the objects are not the same, or only one is null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.InRange``1(``0,``0,``0,System.String,System.String)">
            <summary>
               Ensure a value is within the bounds of a defined minimum and maximum.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="min">The minimum value for the range (inclusive)</param>
            <param name="max">The maximum value for the range (inclusive)</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">
               When <paramref name="value" />, <paramref name="min" /> or <paramref name="max" /> are null.
            </exception>
            <exception cref="T:System.ArgumentException">When the value is outside of the specified range.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsGreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
               Ensure a value is greater than another specified value.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="comparison">What <paramref name="value" /> must be greater than.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">
               When either <paramref name="value" /> or <paramref name="comparison" /> are null.
            </exception>
            <exception cref="T:System.ArgumentException">
               When the <paramref name="value" /> is less than or equal to <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsGreaterThanOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
               Ensure a value is greater than or equal to another specified value.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="comparison">
               What <paramref name="value" /> must be greater than or equivalent to.
            </param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">
               When either <paramref name="value" /> or <paramref name="comparison" /> are null.
            </exception>
            <exception cref="T:System.ArgumentException">
               When the <paramref name="value" /> is less than <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsLessThan``1(``0,``0,System.String,System.String)">
            <summary>
               Ensure a value is less than another specified value.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="comparison">What <paramref name="value" /> must be less than.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">
               When either <paramref name="value" /> or <paramref name="comparison" /> are null.
            </exception>
            <exception cref="T:System.ArgumentException">
               When the <paramref name="value" /> is greater than or equal to <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.IsLessThanOrEqual``1(``0,``0,System.String,System.String)">
            <summary>
               Ensure a value is less than or equal to another specified value.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="comparison">
               What <paramref name="value" /> must be less than or equivalent to.
            </param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">
               When either <paramref name="value" /> or <paramref name="comparison" /> are null.
            </exception>
            <exception cref="T:System.ArgumentException">
               When the <paramref name="value" /> is greater than <paramref name="comparison" />.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Argument.NotInRange``1(``0,``0,``0,System.String,System.String)">
            <summary>
               Ensure a value is not within the bounds of a specified range.
            </summary>
            <typeparam name="T">The type of the compared values.</typeparam>
            <param name="value">The value being tested.</param>
            <param name="min">The minimum value for the range (inclusive)</param>
            <param name="max">The maximum value for the range (inclusive)</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">
               When <paramref name="value" />, <paramref name="min" /> or <paramref name="max" /> are null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the value is within the specified range.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.Fails``1(Jcd.Validations.Check.Signature{``0},``0,System.String,System.String)">
            <summary>
               Ensures a custom check fails.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="condition">The custom check.</param>
            <param name="value">The value to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the value passes the custom check.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.FailsAll``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.String,System.String)">
            <summary>
               Ensures a series of custom checks all fail.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="conditions">The set of custom checks.</param>
            <param name="value">The value to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the value passes any of the custom checks.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.FailsAny``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.String,System.String)">
            <summary>
               Ensures at least one of a set of custom checks fails.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="conditions">The set of custom checks.</param>
            <param name="value">The value to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the value passes any of the custom checks.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.Passes``1(Jcd.Validations.Check.Signature{``0},``0,System.String,System.String)">
            <summary>
               Ensures a custom check passes.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="condition">The custom check.</param>
            <param name="value">The value to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the value fails the custom check.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.PassesAll``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.String,System.String)">
            <summary>
               Ensures a series of custom checks all pass.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="conditions">The set of custom checks.</param>
            <param name="value">The value to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the value fails any of the custom checks.</exception>
        </member>
        <member name="M:Jcd.Validations.Argument.PassesAny``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.String,System.String)">
            <summary>
               Ensures at least one check in series of custom checks passes.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="conditions">The set of custom checks.</param>
            <param name="value">The value to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException">When the value fails any of the custom checks.</exception>
        </member>
        <member name="T:Jcd.Validations.Check">
            <summary>
            A helper class to assist in making certain classes of validations more human readable.
            </summary>
            <remarks>
            The methods in this helper build from a basic set of rudimentary validations, to aggregates
            like PassesAll. These are in turn used within the Argument enforcement helper, Argument and
            its derived methods, Keeping those methods as readable as possible. Additionally, while
            Argument is used for enforcing a non-null for its consumers it could not be used within this
            class without injecting the potential for infinite recursion. To work around that a sole
            private helper, EnforceNonNull was implemented and used judiciously.
            </remarks>
        </member>
        <member name="T:Jcd.Validations.Check.Signature`1">
            <summary>
            The signature for delegates used in Passes&lt; <typeparamref name="T"/>&gt;, Fails&lt;
            <typeparamref name="T"/>&gt;, and aggregates of these methods (e.g. PassesAll). Most
            helpers implement this signature.
            </summary>
            <typeparam name="T">The data type to perform a validation on.</typeparam>
            <param name="value">the value to validate</param>
            <param name="onSuccess">
            The action to take, if any, when the delegate detects a "success" condition.
            </param>
            <param name="onFailure">
            The action to take, if any, when the delegate detects a "failure" condition.
            </param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsFalse(System.Boolean,System.Action,System.Action)">
            <summary>
            Returns the logical complement of value, and executes any success or failure conditions.
            </summary>
            <remarks>
            This is a rudimentary helper method. While public it has little value outside of this or a
            similar framework.
            </remarks>
            <param name="value">The value to negate, evaluate, then return</param>
            <param name="onSuccess">The action to take, if any, when value == false.</param>
            <param name="onFailure">The action to take, if any, when value == false.</param>
            <returns>the logical negation of value(true if false, false if true)</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsNotNull``1(``0,System.Action,System.Action)">
            <summary>
            Check if the provided value is not null and, if applicable, take an indicated action.
            </summary>
            <typeparam name="T">The type of the data being evaluated</typeparam>
            <param name="value">The value being evaluated</param>
            <param name="onSuccess">The action to take, if any, when value != null.</param>
            <param name="onFailure">The action to take, if any, when value != null.</param>
            <returns>true if value is null, false otherwise</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsNull``1(``0,System.Action,System.Action)">
            <summary>
            Check if the provided value is null and, if applicable, take an indicated action.
            </summary>
            <typeparam name="T">The type of the data being evaluated</typeparam>
            <param name="value">The value being evaluated</param>
            <param name="onSuccess">The action to take, if any, when value == null.</param>
            <param name="onFailure">The action to take, if any, when value == null.</param>
            <returns>true if value is null, false otherwise</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsTrue(System.Boolean,System.Action,System.Action)">
            <summary>
            Returns the value of value, and executes any success or failure conditions.
            </summary>
            <remarks>
            This is a rudimentary helper method. While public it has little value outside of this or a
            similar framework.
            </remarks>
            <param name="value">The value to evaluate and return</param>
            <param name="onSuccess">The action to take, if any, when value == true.</param>
            <param name="onFailure">The action to take, if any, when value == true.</param>
            <returns>the value of value</returns>
        </member>
        <member name="M:Jcd.Validations.Check.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Action,System.Action)">
            <summary>
            Checks if a collection of type <typeparamref name="T"/> contains a specific item.
            </summary>
            <typeparam name="T">The type of the data stored in T</typeparam>
            <param name="list">The collection to check</param>
            <param name="target">The item to look for.</param>
            <param name="onSuccess">The action to take, if any, when the item is found.</param>
            <param name="onFailure">The action to take, if any, when the item is not found.</param>
            <returns>True if the item is found, false otherwise.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.Action,System.Action)">
            <summary>
            Checks if a collection of type <typeparamref name="T"/> does not contain a specific item.
            </summary>
            <typeparam name="T">The type of the data stored in T</typeparam>
            <param name="list">The collection to check</param>
            <param name="target">The item to look for.</param>
            <param name="onSuccess">The action to take, if any, when the item is found.</param>
            <param name="onFailure">The action to take, if any, when the item is not found.</param>
            <returns>True if the item is not found, false otherwise.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.HasItems``1(System.Collections.Generic.IEnumerable{``0},System.Action,System.Action)">
            <summary>
            Checks if a collection of type <typeparamref name="T"/> has entries.
            </summary>
            <typeparam name="T">The type of the data stored in T</typeparam>
            <param name="list">The collection to check</param>
            <param name="onSuccess">The action to take, if any, when the collection has entries.</param>
            <param name="onFailure">The action to take, if any, when the collection is empty.</param>
            <returns>False if list is empty, true otherwise</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Action,System.Action)">
            <summary>
            Checks if a collection of type <typeparamref name="T"/> lacks entries.
            </summary>
            <typeparam name="T">The type of the data stored in T</typeparam>
            <param name="list">The collection to check</param>
            <param name="onSuccess">The action to take, if any, when the collection is empty.</param>
            <param name="onFailure">The action to take, if any, when the collection is not empty.</param>
            <returns>True if list is empty, false otherwise</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsNotEmpty(System.String,System.Action,System.Action)">
            <summary>
            Checks if a string has 1 or more characters in it, or is null.
            </summary>
            <param name="value">The string to check.</param>
            <param name="onSuccess">The action to take if the string is not empty</param>
            <param name="onFailure">The action to take if the string is empty</param>
            <returns>True if the string is not empty, false otherwise.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsEmpty(System.String,System.Action,System.Action)">
            <summary>
            Checks if a string is empty and not-null
            </summary>
            <param name="value">the value to check.</param>
            <param name="onSuccess">The action to take if the string is empty</param>
            <param name="onFailure">The action to take if the string is not empty</param>
            <returns>True if the string is empty, false otherwise.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsNotWhitespace(System.String,System.Action,System.Action)">
            <summary>
            Checks if the string is not-null and is either empty or has non-whitespace characters.
            </summary>
            <param name="value">The string to check.</param>
            <param name="onSuccess">The action to take if the string is not empty.</param>
            <param name="onFailure">
            The action to take if the string is null, empty, or has nonwhitespace characters.
            </param>
            <returns>True if the string is non-null, and non-whitespace, false otherwise.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.IsWhitespace(System.String,System.Action,System.Action)">
            <summary>
            Checks if the string has only whitespace and is not empty nor null.
            </summary>
            <param name="value">The string to check.</param>
            <param name="onSuccess">The action to take if the string is not empty.</param>
            <param name="onFailure">
            The action to take if the string is null, empty, or has nonwhitespace characters.
            </param>
            <returns>True if the string is non-zero length and only contains whitespace.</returns>
        </member>
        <member name="M:Jcd.Validations.Check.AreEqual``1(``0,``0,System.Action,System.Action)">
            <summary>
            Checks if <paramref name="left"/> is equivalent to <paramref name="right"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left hand side of the comparison</param>
            <param name="right">The right hand side of the comparison</param>
            <param name="onSuccess">
            The action to take if <paramref name="left"/> is equivalent to <paramref name="right"/>
            </param>
            <param name="onFailure">
            The action to take if <paramref name="left"/> is not equivalent to <paramref name="right"/>
            </param>
            <returns>True if left is is equivalent to right.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> are null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.AreSameObject(System.Object,System.Object,System.Action,System.Action)">
            <summary>
            Checks if <paramref name="left"/> and <paramref name="right"/> are the same instance of an object.
            </summary>
            <param name="left">The left hand side of the comparison</param>
            <param name="right">The right hand side of the comparison</param>
            <param name="onSuccess">The action to take if they're the same instance.</param>
            <param name="onFailure">The action to take if they're not the same instance.</param>
            <returns>true if left and right are the same instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            If only one of <paramref name="left"/> or <paramref name="right"/> are null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.InRange``1(``0,``0,``0,System.Action,System.Action)">
            <summary>
            Checks if <paramref name="value"/> is within the range defined by [ <paramref name="min"/>
            , <paramref name="max"/> ]. Or in other words: <paramref name="value"/> ∈ [ <paramref
            name="min"/>, <paramref name="max"/>]
            </summary>
            <typeparam name="T">
            The type of data being compared. It must implement IComparable&lt; <typeparamref name="T"/>&gt;
            </typeparam>
            <param name="value">The value to compare</param>
            <param name="min">The lower, inclusive, extent of the range.</param>
            <param name="max">The upper, inclusive extent of the range.</param>
            <param name="onSuccess">
            The action to take if <paramref name="value"/> ∈ [ <paramref name="min"/>, <paramref
            name="max"/> ]
            </param>
            <param name="onFailure">
            The action to take if <paramref name="value"/> ∉ [ <paramref name="min"/>, <paramref
            name="max"/> ]
            </param>
            <returns>
            True if <paramref name="value"/> ∈ [ <paramref name="min"/>, <paramref name="max"/> ]
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/>, <paramref name="min"/>, or <paramref name="max"/> are null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.IsGreaterThan``1(``0,``0,System.Action,System.Action)">
            <summary>
            Checks if <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left hand side of the comparison</param>
            <param name="right">The right hand side of the comparison</param>
            <param name="onSuccess">
            The action to take if <paramref name="left"/> is greater than <paramref name="right"/>
            </param>
            <param name="onFailure">
            The action to take if <paramref name="left"/> is not greater than <paramref name="right"/>
            </param>
            <returns>True if left is greater than right.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> are null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.IsLessThan``1(``0,``0,System.Action,System.Action)">
            <summary>
            Checks if <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">The left hand side of the comparison</param>
            <param name="right">The right hand side of the comparison</param>
            <param name="onSuccess">
            The action to take if <paramref name="left"/> is less than <paramref name="right"/>
            </param>
            <param name="onFailure">
            The action to take if <paramref name="left"/> is not less than <paramref name="right"/>
            </param>
            <returns>True if left is less than right.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="left"/> or <paramref name="right"/> are null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.NotInRange``1(``0,``0,``0,System.Action,System.Action)">
            <summary>
            Checks if <paramref name="value"/> is NOT within the range defined by [ <paramref
            name="min"/> , <paramref name="max"/> ]. Or in other words: <paramref name="value"/> ∉ [
            <paramref name="min"/>, <paramref name="max"/>]
            </summary>
            <typeparam name="T">
            The type of data being compared. It must implement IComparable&lt; <typeparamref name="T"/>&gt;
            </typeparam>
            <param name="value">The value to compare</param>
            <param name="min">The lower, inclusive, extent of the range.</param>
            <param name="max">The upper, inclusive extent of the range.</param>
            <param name="onSuccess">
            The action to take if <paramref name="value"/> ∉ [ <paramref name="min"/>, <paramref
            name="max"/> ]
            </param>
            <param name="onFailure">
            The action to take if <paramref name="value"/> ∈ [ <paramref name="min"/>, <paramref
            name="max"/> ]
            </param>
            <returns>
            True if <paramref name="value"/> ∉ [ <paramref name="min"/>, <paramref name="max"/> ]
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/>, <paramref name="min"/>, or <paramref name="max"/> are null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.Fails``1(Jcd.Validations.Check.Signature{``0},``0,System.Action,System.Action)">
            <summary>
            Evaluates a predicate ( <paramref name="condition"/> ) on a value ( <paramref
            name="value"/> ) and returns the logical complement of the result of the evaluation.
            </summary>
            <typeparam name="T">The datatype being evaluated</typeparam>
            <param name="condition">The condition being evaluated</param>
            <param name="value">The value being evaluated</param>
            <param name="onSuccess">
            The action to perform if <paramref name="condition"/> returns false when passed <paramref name="value"/>
            </param>
            <param name="onFailure">
            The action to perform if <paramref name="condition"/> returns true when passed <paramref name="value"/>
            </param>
            <returns>
            The logical complement of the result of executing <paramref name="condition"/>( <paramref
            name="value"/> )
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Check.Fails(System.Func{System.Boolean},System.Action,System.Action)">
            <summary>
            Evaluates a parameterless predicate ( <paramref name="condition"/> ) and returns the
            logical complement of the result of the evaluation.
            </summary>
            <param name="condition">The condition being evaluated</param>
            <param name="onSuccess">
            The action to perform if <paramref name="condition"/> returns false
            </param>
            <param name="onFailure">
            The action to perform if <paramref name="condition"/> returns true
            </param>
            <returns>The logical complement of the result of executing <paramref name="condition"/>()</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Check.FailsAll``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.Action,System.Action)">
            <summary>
            Evaluates a set of predicates ( <paramref name="conditions"/> ) on a value to determine if
            all predicates return false.
            </summary>
            <typeparam name="T">The type of data being evaluated</typeparam>
            <param name="conditions">The set of predicates to evaluate</param>
            <param name="value">The value to evaluate the predicates on.</param>
            <param name="onSuccess">The action to perform if all predicates return false.</param>
            <param name="onFailure">The action to perform if any predicate return true.</param>
            <returns>True if all predicates return false</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="conditions"/> is null or any individual entry is null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.FailsAny``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.Action,System.Action)">
            <summary>
            Evaluates a set of predicates ( <paramref name="conditions"/> ) on a value to determine if
            any predicates return false.
            </summary>
            <typeparam name="T">The type of data being evaluated</typeparam>
            <param name="conditions">The set of predicates to evaluate</param>
            <param name="value">The value to evaluate the predicates on.</param>
            <param name="onSuccess">The action to perform if any predicate return false.</param>
            <param name="onFailure">The action to perform if all predicates return true.</param>
            <returns>True if any predicate return false</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="conditions"/> is null or any individual entry is null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.Passes``1(Jcd.Validations.Check.Signature{``0},``0,System.Action,System.Action)">
            <summary>
            Evaluates a predicate ( <paramref name="condition"/> ) on a value ( <paramref
            name="value"/> ) and returns the result of the evaluation.
            </summary>
            <typeparam name="T">The datatype being evaluated</typeparam>
            <param name="condition">The condition being evaluated</param>
            <param name="value">The value being evaluated</param>
            <param name="onSuccess">
            The action to perform if <paramref name="condition"/> returns true when passed <paramref name="value"/>
            </param>
            <param name="onFailure">
            The action to perform if <paramref name="condition"/> returns false when passed <paramref name="value"/>
            </param>
            <returns>
            The result of executing <paramref name="condition"/>( <paramref name="value"/> )
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Check.Passes(System.Func{System.Boolean},System.Action,System.Action)">
            <summary>
            Evaluates a parameterless predicate ( <paramref name="condition"/> ) and returns the result
            of the evaluation.
            </summary>
            <param name="condition">The condition being evaluated</param>
            <param name="onSuccess">
            The action to perform if <paramref name="condition"/> returns true
            </param>
            <param name="onFailure">
            The action to perform if <paramref name="condition"/> returns false
            </param>
            <returns>The result of executing <paramref name="condition"/>()</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="condition"/> is null.</exception>
        </member>
        <member name="M:Jcd.Validations.Check.PassesAll``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.Action,System.Action)">
            <summary>
            Evaluates a set of predicates ( <paramref name="conditions"/> ) on a value to determine if
            all predicates return true.
            </summary>
            <typeparam name="T">The type of data being evaluated</typeparam>
            <param name="conditions">The set of predicates to evaluate</param>
            <param name="value">The value to evaluate the predicates on.</param>
            <param name="onSuccess">The action to perform if all predicates return true.</param>
            <param name="onFailure">The action to perform if any predicate return false.</param>
            <returns>True if all predicates return true</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="conditions"/> is null or any individual entry is null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.PassesAny``1(System.Collections.Generic.IEnumerable{Jcd.Validations.Check.Signature{``0}},``0,System.Action,System.Action)">
            <summary>
            Evaluates a set of predicates ( <paramref name="conditions"/> ) on a value to determine if
            any predicates return true.
            </summary>
            <typeparam name="T">The type of data being evaluated</typeparam>
            <param name="conditions">The set of predicates to evaluate</param>
            <param name="value">The value to evaluate the predicates on.</param>
            <param name="onSuccess">The action to perform if any predicate return true.</param>
            <param name="onFailure">The action to perform if all predicates return false.</param>
            <returns>True if any predicate return true</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="conditions"/> is null or any individual entry is null.
            </exception>
        </member>
        <member name="M:Jcd.Validations.Check.EnforceAllEntriesNonNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            A helper to ensure we have a valid set of checks.
            </summary>
            <typeparam name="T">The type of the data the check will evaluate</typeparam>
            <param name="values">the set of values to evaluate</param>
            <param name="argumentName"></param>
        </member>
        <member name="M:Jcd.Validations.Check.EnforceNonNull``1(``0[])">
            <summary>
            Enforces that all values are non-null.
            </summary>
            <typeparam name="T">The type of data to evaluate</typeparam>
            <param name="values">the values to evaluate.</param>
        </member>
        <member name="M:Jcd.Validations.Check.EnforceNonNull``1(``0,System.String)">
            <summary>
            Enforces that all values are non-null.
            </summary>
            <typeparam name="T">The type of data to evaluate</typeparam>
            <param name="value">the values to evaluate.</param>
            <param name="argumentName"></param>
        </member>
    </members>
</doc>
